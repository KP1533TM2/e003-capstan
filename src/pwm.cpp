//----------------------------------------------------------------------------

//Модуль формирования PWM-сигнала

//----------------------- Используемые ресурсы: ------------------------------

//Модуль используется для получения управляющего напряжения для схемы
//питания двигателя. Поскольку единственный 16-разрядный таймер занят,
//а разрешения 8-разрядного PWM не хватает, используется комбинация
//аппаратного 8-разрядного PWM (канал OCR2A) и программного 8-разрядного
//Delta-Sigma модулятора. В результате получается сигнал, имеющий разрешение
//16 бит (по постоянной составляющей), основная энергия спектра которого лежит
//на частоте аппаратного PWM (62.5 кГц) и выше, что упрощает фильтрацию.
//Недостатком является то, что программный Delta-Sigma модулятор заметно
//загружает процессор (примерно на 15%).

//----------------------------------------------------------------------------

#include "main.hpp"
#include "pwm.hpp"

//----------------------------------------------------------------------------
//------------------------------ Класс TPwm: ---------------------------------
//----------------------------------------------------------------------------

//----------------------------- Конструктор: ---------------------------------

TPwm::TPwm(void)
{
  Pin_Pwm.DirOut(PIN_LOW);
  Set(0);
  OCR2A = Pwm_iHi;
  //fast PWM, set OC2A on compare match:
  TCCR2A = (1 << COM2A1) | (1 << COM2A0) | (1 << WGM21) | (1 << WGM20);
  TCCR2B = (1 << CS20);   //CK/1
  TIFR2 = (1 << TOV2);    //pending interrupts clear
  TIMSK2 |= (1 << TOIE2); //overflow interrupt enable
}

//--------------------------- Прерывание таймера: ----------------------------

uint8_t TPwm::Pwm_Lo;
uint8_t TPwm::Pwm_iHi;
uint8_t TPwm::Pwm_iHi_plus_1;

#pragma vector = TIMER2_OVF_vect
__interrupt void SigmaDelta(void)
{
  static uint8_t Sigma = 0;
  Sigma = Sigma + TPwm::Pwm_Lo;
  OCR2A = (SREG & 1)? TPwm::Pwm_iHi_plus_1 : TPwm::Pwm_iHi;
}

//------------------------------ Задание PWM: --------------------------------

void TPwm::Set(uint16_t v)
{
  if(v > PWM_MAX) v = PWM_MAX;
  Pwm_Lo = LO(v) & LO(PWM_MASK);
  Pwm_iHi = ~HI(v);
  Pwm_iHi_plus_1 = ~(HI(v) + 1);
}

//------------------------------- Чтение PWM: --------------------------------

uint16_t TPwm::Get(void)
{
  return(WORD(~Pwm_iHi, Pwm_Lo));
}

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
